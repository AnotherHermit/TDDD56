/*
 * Image filter in OpenCL
 */

#define KERNELSIZE 4
#define DIVVAL (2*KERNELSIZE+1)*(2*KERNELSIZE+1)
#define LOCALWIDTH 16
#define LOAD_PIXEL(i, j, I, J) \
  lImage[i + (j) * LOCALWIDTH].x = image[0+3 * ((I) + (J) * 512)];\
  lImage[i + (j) * LOCALWIDTH].y = image[1+3 * ((I) + (J) * 512)];\
  lImage[i + (j) * LOCALWIDTH].z = image[2+3 * ((I) + (J) * 512)];


__kernel void filter(__global unsigned char *image, __global unsigned char *out, const unsigned int n, const unsigned int m)
{ 
  vec2 gtid = vec2(get_global_id(0) + 4, get_global_id(1) + 4);
  vec2 tid = vec2(get_local_id(0), get_local_id(1));
  
  int k, l;
  uvec3 sum = vec3(0);
   
  __local uvec3 lImage[256];

  LOAD_PIXEL(tid.x + 0, tid.y + 0, gtid.x - 4, gtid.y - 4)
  LOAD_PIXEL(tid.x + 8, tid.y + 0, gtid.x + 4, gtid.y - 4)
  LOAD_PIXEL(tid.x + 0, tid.y + 8, gtid.x - 4, gtid.y + 4)
  LOAD_PIXEL(tid.x + 8, tid.y + 8, gtid.x + 4, gtid.y + 4)


	for(k=-KERNELSIZE;k<=KERNELSIZE;k++) {
		for(l=-KERNELSIZE;l<=KERNELSIZE;l++)	
		{
			sum += lImage[((tid.x+k)*LOCALWIDTH+(tid.y+l))*3+0];
		}
	}
	
	sum /= DIVVAL;	
	image[0+3 * (gtid.x + gtid.y * 512)] = sum.x;
	image[1+3 * (gtid.x + gtid.y * 512)] = sum.y;
	image[2+3 * (gtid.x + gtid.y * 512)] = sum.z;
	}
}
